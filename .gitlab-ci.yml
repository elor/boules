stages:
  - containers
  - build
  - deploy
  - staging
  - release

docker:build:
  stage: containers
  only:
    - develop
  image: docker:latest
  tags:
    - docker-build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE/build -f Dockerfiles/build.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/build

build:dev:
  stage: build
  only:
    - develop
    - /^feature-.*$/
  image: server.tuvero.de:5555/elor/tuvero/build:latest
  script:
    - npm install
    - npm install cli/
    - npm run-script build
  artifacts:
    name: "artifacts_develop"
    paths:
      - build/
    expire_in: 1 week

deploy:dev:
  stage: deploy
  environment:
    name: dev
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  artifacts:
    when: on_failure
    paths:
      - latest.tar.gz
    expire_in: 1 week
  dependencies:
    - build:dev
  image: alpine:latest
  script:
    - apk update
    - apk add curl lftp
    - tar czfv latest.tar.gz -C build .
    - filestamp="$(date -Iseconds)_${CI_COMMIT_SHA:0:8}"
    - cp latest.tar.gz ${filestamp}.tar.gz
    - lftp -e "cd develop; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=develop https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline

staging:
  stage: staging
  when: manual
  variables:
    GIT_STRATEGY: clone
  environment:
    name: staging
  only:
    - develop
  dependencies: []
  image: alpine:latest
  before_script:
    - apk update
    - apk add curl nodejs nodejs-npm git openssh-client lftp
    - mkdir -m 700 -p ~/.ssh/
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -t rsa ${SERVER_HOSTNAME} > ~/.ssh/known_hosts
    - git remote add server git@${SERVER_HOSTNAME}:${CI_PROJECT_PATH}
    - version=$(sed -n 's/^.*"version".*:.*"\([0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?\)-.*".$/\1/p' package.json)
    - git config --global user.email "info@tuvero.de"
    - git config --global user.name "Tuvero Autobuild"
    - git fetch server staging
  script:
    - git checkout -b "release-$version"
    - test -z "$version" && { echo "Cannot read version"; exit 1; }
    - sed -i -e "s/$version-[a-z][a-z0-9]*/$version/" package.json
    - rm -rf .vscode/
    - npm install
    - npm run-script release
    - test -z "$(find -name '.*' -not -path './.git' -not -path '.' | tee /dev/stderr)"
    - git add -u
    - git add .
    - git commit -m "Release $version built"
    - git checkout -b staging server/staging
    - git merge -X theirs -m "Release $version" "release-$version"
    - git tag "$version"
    - git push server staging:staging --tags
    - tar czvf latest.tar.gz *
    - cp latest.tar.gz ${version}-${CI_COMMIT_SHA:0:8}.tar.gz
    - lftp -e "cd staging; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=staging https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline

production:
  stage: release
  when: manual
  variables:
    GIT_STRATEGY: clone
  dependencies: []
  environment:
    name: production
  only:
    - develop
  image: alpine:latest
  before_script:
    - apk update
    - apk add curl git openssh-client lftp
    - mkdir -m 700 -p ~/.ssh/
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -t rsa ${SERVER_HOSTNAME} > ~/.ssh/known_hosts
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git remote add server git@${SERVER_HOSTNAME}:${CI_PROJECT_PATH}
    - git remote add github git@github.com:${CI_PROJECT_PATH}
    - version=$(sed -n 's/^.*"version".*:.*"\([0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?\)-.*".$/\1/p' package.json)
    - git config --global user.email "info@tuvero.de"
    - git config --global user.name "Tuvero Autobuild"
    - git fetch server staging
    - git fetch server master
  script:
    - git checkout -b master server/master
    - git merge --ff-only server/staging
    - git push server master:master
    - git push github master:master
    - tar czvf latest.tar.gz *
    - cp latest.tar.gz ${version}-${CI_COMMIT_SHA:0:8}.tar.gz
    - lftp -e "cd master; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=master https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline
