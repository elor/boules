stages:
  - containers
  - build
  - staging
  - release

container:build:
  stage: containers
  only:
    - feature-buildcontainer
  image: docker:latest
  tags:
    - docker-build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/build -f Dockerfiles/build.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/build

container:deploy:
  stage: containers
  only:
    - feature-buildcontainer
  image: docker:latest
  tags:
    - docker-build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE/deploy -f Dockerfiles/deploy.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/deploy

tuveroserver:
  stage: build
  only:
    - develop
  image: docker:latest
  tags:
    - docker-build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE/tuveroserver -f Dockerfiles/tuveroserver.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/tuveroserver

build:dev:
  stage: build
  environment:
    name: dev
  image: server.tuvero.de:5555/elor/tuvero/build:latest
  only:
    - develop
    - /^feature-.*$/
  script:
    - ln -vs /root/node_modules ./
    - ln -vs /root/cli/node_modules cli/
    - npm run build
    - tar czfv latest.tar.gz -C build .
    - cp latest.tar.gz "$(date -Iseconds)_${CI_COMMIT_SHA:0:8}".tar.gz
    - lftp -e "cd develop; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=develop https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline

.deploy_base:
  image: server.tuvero.de:5555/elor/tuvero/deploy:latest
  only:
    - develop
    - feature-buildcontainer
  dependencies: []

staging:
  extends: .deploy_base
  stage: staging
  when: manual
  variables:
    GIT_STRATEGY: clone
  environment:
    name: staging
  script:
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - git remote add server git@server.tuvero.de:elor/tuvero
    - git fetch server staging
    - version=$(sed -n 's/^.*"version".*:.*"\([0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?\)-.*".$/\1/p' package.json)
    - git checkout -b "release-$version"
    - test -z "$version" && { echo "Cannot read version"; exit 1; }
    - sed -i -e "s/$version-[a-z][a-z0-9]*/$version/" package.json
    - rm -rf .vscode/
    - npm install
    - npm run-script release
    - test -z "$(find -name '.*' -not -path './.git' -not -path '.' | tee /dev/stderr)"
    - git add -u
    - git add .
    - git commit -m "Release $version built"
    - git checkout -b staging server/staging
    - git merge -X theirs -m "Release $version" "release-$version"
    - git tag "$version"
    - git push server staging:staging --tags
    - tar czvf latest.tar.gz *
    - cp latest.tar.gz ${version}-${CI_COMMIT_SHA:0:8}.tar.gz
    - lftp -e "cd staging; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=staging https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline

production:
  extends: .deploy_base
  stage: release
  when: manual
  variables:
    GIT_STRATEGY: clone
  dependencies: []
  environment:
    name: production
  script:
    - echo "$SSH_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - git remote add server git@server.tuvero.de:elor/tuvero
    - git remote add github git@github.com:elor/tuvero
    - git fetch server staging
    - git fetch server master
    - version=$(sed -n 's/^.*"version".*:.*"\([0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?\)-.*".$/\1/p' package.json)
    - git checkout -b master server/master
    - git merge --ff-only server/staging
    - git push server master:master
    - git push github master:master
    - tar czvf latest.tar.gz *
    - cp latest.tar.gz ${version}-${CI_COMMIT_SHA:0:8}.tar.gz
    - lftp -e "cd master; mput *.tar.gz" -u ${FTP_USER},${FTP_PASSWD} ${FTP_HOST}
    - curl -X POST -F token=$TURNIERE_TUVERO_TOKEN -F ref=master https://${SERVER_HOSTNAME}/api/v4/projects/1/trigger/pipeline
